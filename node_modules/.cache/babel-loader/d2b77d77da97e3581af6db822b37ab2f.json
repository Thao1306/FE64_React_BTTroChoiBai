{"ast":null,"code":"var _jsxFileName = \"D:\\\\KA\\\\HOC HANH\\\\H\\u1ECCC L\\u1EACP TR\\xCCNH 2021\\\\FRONTEND64_20.03-27.09.2021\\\\Buoi33_17.07.2021_React-function\\\\Tro-choi-bai\\\\src\\\\pages\\\\Game\\\\index.jsx\";\nimport React, { Fragment, useEffect, memo } from \"react\";\nimport \"./index.css\";\nimport Controls from \"../../components/Control\";\nimport Main from \"../../components/Main\";\nimport { useDispatch } from \"react-redux\";\nimport { getDeckCard } from \"../../redux/actions/cards\";\n\nconst Game = () => {\n  // const [a, setA] = useState(0);\n  //useEffect đại diện cho cả 3 loại lifecycle như trong class: didMount, didUpdate, willUpdate\n  //memo tương tự như pure component trong class (memo sẽ check điều kiện khi nào Game cần render lại thì mới render, tức nêu cha ko có truyền prop cho con/prop ko đổi khi cha render thì memo sẽ xét điều kiện ko ảnh hưởng đến con => con sẽ ko bị render lại)\n  //component didMount, unMounted\n  // useEffect(() => {\n  //   console.log(\"component didMount\");\n  //   return () => {\n  //     console.log(\"component unMounted\"); //phải set trong useEffect có dependency là mảng [], sẽ chạy khi component bị hủy\n  //   };\n  // }, []);\n  //component didUpdated\n  // useEffect(() => {\n  //   console.log(\"component didUpdated\");\n  // }, [a]);\n  //luôn chạy\n  // useEffect(() => {\n  //   console.log(\"always run\");\n  // });\n  //--------------\n  const dispatch = useDispatch();\n  useEffect(() => {\n    getDeckCard(dispatch);\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Game; // export default memo(Game); //giống pure component trong react class ->bọc các component con ko bị render lại khi component cha render lại trong trường hợp con ko bị ảnh hưởng/hoặc các props cha truyền cho con ko ảnh hưởng","map":{"version":3,"sources":["D:/KA/HOC HANH/HỌC LẬP TRÌNH 2021/FRONTEND64_20.03-27.09.2021/Buoi33_17.07.2021_React-function/Tro-choi-bai/src/pages/Game/index.jsx"],"names":["React","Fragment","useEffect","memo","Controls","Main","useDispatch","getDeckCard","Game","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,IAArC,QAAiD,OAAjD;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,WAAW,CAACE,QAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,eAGE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD,CApCD;;AAsCA,eAAeD,IAAf,C,CACA","sourcesContent":["import React, { Fragment, useEffect, memo } from \"react\";\r\nimport \"./index.css\";\r\nimport Controls from \"../../components/Control\";\r\nimport Main from \"../../components/Main\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getDeckCard } from \"../../redux/actions/cards\";\r\n\r\nconst Game = () => {\r\n  // const [a, setA] = useState(0);\r\n  //useEffect đại diện cho cả 3 loại lifecycle như trong class: didMount, didUpdate, willUpdate\r\n  //memo tương tự như pure component trong class (memo sẽ check điều kiện khi nào Game cần render lại thì mới render, tức nêu cha ko có truyền prop cho con/prop ko đổi khi cha render thì memo sẽ xét điều kiện ko ảnh hưởng đến con => con sẽ ko bị render lại)\r\n\r\n  //component didMount, unMounted\r\n  // useEffect(() => {\r\n  //   console.log(\"component didMount\");\r\n  //   return () => {\r\n  //     console.log(\"component unMounted\"); //phải set trong useEffect có dependency là mảng [], sẽ chạy khi component bị hủy\r\n  //   };\r\n  // }, []);\r\n  //component didUpdated\r\n  // useEffect(() => {\r\n  //   console.log(\"component didUpdated\");\r\n  // }, [a]);\r\n\r\n  //luôn chạy\r\n  // useEffect(() => {\r\n  //   console.log(\"always run\");\r\n  // });\r\n  //--------------\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getDeckCard(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      {\" \"}\r\n      {/* Fragment chức năng giống thẻ <></> là thẻ rỗng, ko render trên giao diện */}\r\n      <Controls />\r\n      <Main />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n// export default memo(Game); //giống pure component trong react class ->bọc các component con ko bị render lại khi component cha render lại trong trường hợp con ko bị ảnh hưởng/hoặc các props cha truyền cho con ko ảnh hưởng\r\n"]},"metadata":{},"sourceType":"module"}