{"ast":null,"code":"import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\n\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n\n  var result = [];\n\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n\n  return result;\n}\n\nexport default baseKeys;","map":{"version":3,"sources":["D:/KA/HOC HANH/HỌC LẬP TRÌNH 2021/FRONTEND64_20.03-27.09.2021/Buoi33_17.07.2021_React-function/Tro-choi-bai/node_modules/lodash-es/_baseKeys.js"],"names":["isPrototype","nativeKeys","objectProto","Object","prototype","hasOwnProperty","baseKeys","object","result","key","call","push"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA;;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,SAAzB;AAEA;;AACA,IAAIC,cAAc,GAAGH,WAAW,CAACG,cAAjC;AAEA;;;;;;;;AAOA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,MAAI,CAACP,WAAW,CAACO,MAAD,CAAhB,EAA0B;AACxB,WAAON,UAAU,CAACM,MAAD,CAAjB;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,GAAT,IAAgBN,MAAM,CAACI,MAAD,CAAtB,EAAgC;AAC9B,QAAIF,cAAc,CAACK,IAAf,CAAoBH,MAApB,EAA4BE,GAA5B,KAAoCA,GAAG,IAAI,aAA/C,EAA8D;AAC5DD,MAAAA,MAAM,CAACG,IAAP,CAAYF,GAAZ;AACD;AACF;;AACD,SAAOD,MAAP;AACD;;AAED,eAAeF,QAAf","sourcesContent":["import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n"]},"metadata":{},"sourceType":"module"}