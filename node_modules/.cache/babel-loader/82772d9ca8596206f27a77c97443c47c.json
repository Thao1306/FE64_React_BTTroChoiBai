{"ast":null,"code":"var _jsxFileName = \"D:\\\\KA\\\\HOC HANH\\\\H\\u1ECCC L\\u1EACP TR\\xCCNH 2021\\\\FRONTEND64_20.03-27.09.2021\\\\Buoi33_17.07.2021_React-function\\\\Tro-choi-bai\\\\src\\\\components\\\\Control\\\\index.jsx\";\nimport React, { useCallback } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector, useStore } from \"react-redux\"; //dùng useStore khi cần lấy dữ liệu trên store xuống dùng mà component ko cần phải render lại, còn nếu component phải render lại thì dùng useSelector (do useSeclector đổi thì state của component cũng đổi nên phải render lại)\n\nconst Control = () => {\n  //Hàm useStore dùng để lấy dữ liệu về dùng mà ko thay đổi state của component như useSelector\n  const store = useStore(); // store.getState()\n\n  const deckCard = useSelector(state => {\n    return state.card.deckCard;\n  });\n  const playList = useSelector(state => {\n    return state.player.playerList;\n  });\n  const resultArr = [];\n  const dispatch = useDispatch();\n  const {\n    isReveal,\n    isDraw,\n    isShuffle\n  } = store.getState();\n  const drawCards = useCallback(() => {\n    axios({\n      method: \"GET\",\n      url: `http://deckofcardsapi.com/api/deck/new/draw/?count=12`\n    }).then(res => {\n      const players = [...playList]; //chia bài\n\n      for (const i in res.data.cards) {\n        const playerIndex = i % 4;\n        players[playerIndex].cards.push(res.data.cards[i]); //i = 0, playerIndex = 0 => card[0] => player[0]\n        //i = 1, playerIndex = 1 => card[1] => player[1]\n        //i = 2, playerIndex = 2 => card[2] => player[2]\n        //i = 3, playerIndex = 3 => card[3] => player[3]\n        //i = 4, playerIndex = 0 => card[4] => player[0]\n        //i = 5, playerIndex = 1 => card[5] => player[1]\n        //i = 6, playerIndex = 2 => card[6] => player[2]\n      }\n\n      dispatch({\n        type: \"SET_PLAYERS\",\n        payload: players\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [deckCard, playList]);\n\n  const setPoint = (players, winnerList, gain, lose) => {\n    return players.map(player => {\n      let newItem = { ...player\n      };\n      let winner = winnerList.find(item => player.username === item.username);\n\n      if (winner) {\n        newItem.totalPoint = player.totalPoint + gain;\n      } else {\n        newItem.totalPoint = player.totalPoint - lose;\n      }\n\n      return newItem;\n    });\n  };\n\n  const revealCards = useCallback(() => {\n    //1. Lật bài\n    dispatch({\n      type: \"REVEAL_CARDS\"\n    }); //2. tính kết quả\n    //check playerList\n    //TH còn lại: cộng điểm người chơi, tìm max\n    //note: có thể có nhiều hơn 1 người thắng, danh sách người thắng phải là 1 cái mảng\n\n    let players = [...playList];\n    let winnerList = [{\n      username: \"\",\n      result: 0,\n      totalPoint: 25000\n    }];\n    const resultList = players.map(item => {\n      //TH đặc biệt : King, Jack, Queen\n      let arrKJQCase = item.cards.filter(card => card.value === \"QUEEN\" || card.value === \"KING\" || card.value === \"JACK\");\n\n      if (arrKJQCase.length === 3) {\n        winnerList.push(item);\n      } else {\n        const point = item.cards.reduce((pointCard, card, index) => {\n          if (card.value === \"ACE\") {\n            card.value = 1;\n          }\n\n          if (card.value === \"QUEEN\" || card.value === \"KING\" || card.value === \"JACK\") {\n            card.value = 10;\n          }\n\n          pointCard += +card.value;\n          return pointCard;\n        }, 0);\n        let playerList = {\n          username: item.username,\n          result: point % 10,\n          totalPoint: item.totalPoint\n        };\n        return playerList;\n      }\n    });\n\n    for (let player of resultList) {\n      if (player.result > winnerList[0].result) {\n        winnerList = [{ ...player\n        }];\n      }\n\n      if (player.result === winnerList[0].result) {\n        if (!winnerList.find(item => item.username === player.username)) {\n          winnerList.push(player);\n        }\n      }\n    }\n\n    switch (winnerList.length) {\n      case 1:\n        players = setPoint(players, winnerList, 3000, 1000);\n        break;\n\n      case 2:\n        players = setPoint(players, winnerList, 1000, 1000);\n        break;\n\n      case 3:\n        players = setPoint(players, winnerList, Math.round(1000 / 3), 1000);\n        break;\n\n      default:\n        players = setPoint(players, winnerList, 0, 0);\n        break;\n    } //3.Dispatch new playerList với new totalPoint\n\n\n    dispatch({\n      type: \"SET_PLAYERS\",\n      payload: players\n    });\n  }, [dispatch, setPoint]);\n  console.log(isShuffle);\n  console.log(isDraw);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex  justify-content-end container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border d-flex justify-content-center align-items-center px-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success mr-2\",\n    disabled: !isShuffle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"Shuffle\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-info mr-2\",\n    onClick: drawCards,\n    disabled: !isDraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, \"Draw\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary mr-2\",\n    onClick: revealCards,\n    disabled: !isReveal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"Reveal\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, playList.map(item => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item.username,\n      className: \"border px-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, item.username), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }\n    }, \" \", item.totalPoint, \" \"));\n  })));\n};\n\nexport default Control;","map":{"version":3,"sources":["D:/KA/HOC HANH/HỌC LẬP TRÌNH 2021/FRONTEND64_20.03-27.09.2021/Buoi33_17.07.2021_React-function/Tro-choi-bai/src/components/Control/index.jsx"],"names":["React","useCallback","axios","useDispatch","useSelector","useStore","Control","store","deckCard","state","card","playList","player","playerList","resultArr","dispatch","isReveal","isDraw","isShuffle","getState","drawCards","method","url","then","res","players","i","data","cards","playerIndex","push","type","payload","catch","err","console","log","setPoint","winnerList","gain","lose","map","newItem","winner","find","item","username","totalPoint","revealCards","result","resultList","arrKJQCase","filter","value","length","point","reduce","pointCard","index","Math","round"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector, useStore } from \"react-redux\"; //dùng useStore khi cần lấy dữ liệu trên store xuống dùng mà component ko cần phải render lại, còn nếu component phải render lại thì dùng useSelector (do useSeclector đổi thì state của component cũng đổi nên phải render lại)\r\n\r\nconst Control = () => {\r\n  //Hàm useStore dùng để lấy dữ liệu về dùng mà ko thay đổi state của component như useSelector\r\n  const store = useStore();\r\n  // store.getState()\r\n\r\n  const deckCard = useSelector((state) => {\r\n    return state.card.deckCard;\r\n  });\r\n  const playList = useSelector((state) => {\r\n    return state.player.playerList;\r\n  });\r\n  const resultArr = [];\r\n  const dispatch = useDispatch();\r\n\r\n  const {isReveal, isDraw, isShuffle} = store.getState()\r\n\r\n  const drawCards = useCallback(() => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: `http://deckofcardsapi.com/api/deck/new/draw/?count=12`\r\n    })\r\n      .then((res) => {\r\n        const players = [...playList];\r\n        //chia bài\r\n        for (const i in res.data.cards) {\r\n          const playerIndex = i % 4;\r\n          players[playerIndex].cards.push(res.data.cards[i]);\r\n\r\n          //i = 0, playerIndex = 0 => card[0] => player[0]\r\n          //i = 1, playerIndex = 1 => card[1] => player[1]\r\n          //i = 2, playerIndex = 2 => card[2] => player[2]\r\n          //i = 3, playerIndex = 3 => card[3] => player[3]\r\n          //i = 4, playerIndex = 0 => card[4] => player[0]\r\n          //i = 5, playerIndex = 1 => card[5] => player[1]\r\n          //i = 6, playerIndex = 2 => card[6] => player[2]\r\n        }\r\n        dispatch({ type: \"SET_PLAYERS\", payload: players });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [deckCard, playList]);\r\n\r\n  \r\n\r\n  const setPoint = (players, winnerList, gain, lose) => {\r\n    return players.map((player) => {\r\n      let newItem = { ...player };\r\n\r\n      let winner = winnerList.find((item) => player.username === item.username);\r\n\r\n      if (winner) {\r\n        newItem.totalPoint = player.totalPoint + gain;\r\n      } else {\r\n        newItem.totalPoint = player.totalPoint - lose;\r\n      }\r\n      return newItem;\r\n    });\r\n  };\r\n\r\n  const revealCards = useCallback(() => {\r\n    //1. Lật bài\r\n    dispatch({ type: \"REVEAL_CARDS\" });\r\n    //2. tính kết quả\r\n    //check playerList\r\n\r\n    //TH còn lại: cộng điểm người chơi, tìm max\r\n    //note: có thể có nhiều hơn 1 người thắng, danh sách người thắng phải là 1 cái mảng\r\n    let players = [...playList];\r\n    let winnerList = [{ username: \"\", result: 0, totalPoint: 25000 }];\r\n\r\n    const resultList = players.map((item) => {\r\n      //TH đặc biệt : King, Jack, Queen\r\n      let arrKJQCase = item.cards.filter(\r\n        (card) =>\r\n          card.value === \"QUEEN\" ||\r\n          card.value === \"KING\" ||\r\n          card.value === \"JACK\"\r\n      );\r\n      if (arrKJQCase.length === 3) {\r\n        winnerList.push(item);\r\n      } else {\r\n        const point = item.cards.reduce((pointCard, card, index) => {\r\n          if (card.value === \"ACE\") {\r\n            card.value = 1;\r\n          }\r\n          if (\r\n            card.value === \"QUEEN\" ||\r\n            card.value === \"KING\" ||\r\n            card.value === \"JACK\"\r\n          ) {\r\n            card.value = 10;\r\n          }\r\n\r\n          pointCard += +card.value;\r\n          return pointCard;\r\n        }, 0);\r\n\r\n        let playerList = {\r\n          username: item.username,\r\n          result: point % 10,\r\n          totalPoint: item.totalPoint\r\n        };\r\n        return playerList;\r\n      }\r\n    });\r\n\r\n    for (let player of resultList) {\r\n      if (player.result > winnerList[0].result) {\r\n        winnerList = [{ ...player }];\r\n      }\r\n      if (player.result === winnerList[0].result) {\r\n        if (!winnerList.find((item) => item.username === player.username)) {\r\n          winnerList.push(player);\r\n        }\r\n      }\r\n    }\r\n    switch (winnerList.length) {\r\n      case 1:\r\n        players = setPoint(players, winnerList, 3000, 1000);\r\n        break;\r\n      case 2:\r\n        players = setPoint(players, winnerList, 1000, 1000);\r\n        break;\r\n      case 3:\r\n        players = setPoint(players, winnerList, Math.round(1000 / 3), 1000);\r\n        break;\r\n      default:\r\n        players = setPoint(players, winnerList, 0, 0);\r\n        break;\r\n    }\r\n    //3.Dispatch new playerList với new totalPoint\r\n    dispatch({ type: \"SET_PLAYERS\", payload: players });\r\n  }, [dispatch, setPoint]);\r\n  console.log(isShuffle);\r\n  console.log(isDraw);\r\n  return (\r\n    <div className=\"d-flex  justify-content-end container\">\r\n      <div className=\"border d-flex justify-content-center align-items-center px-2\">\r\n        <button className=\"btn btn-success mr-2\" disabled={!isShuffle}>Shuffle</button>\r\n        <button className=\"btn btn-info mr-2\" onClick={drawCards} disabled={!isDraw}>\r\n          Draw\r\n        </button>\r\n        <button className=\"btn btn-primary mr-2\" onClick={revealCards} disabled={!isReveal}>\r\n          Reveal\r\n        </button>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {playList.map((item) => {\r\n          return (\r\n            <div key={item.username} className=\"border px-3 text-center\">\r\n              <p>{item.username}</p>\r\n              <p> {item.totalPoint} </p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Control;\r\n"]},"metadata":{},"sourceType":"module"}