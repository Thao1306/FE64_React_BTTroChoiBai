{"ast":null,"code":"import axios from \"axios\";\nimport { typeOfCard, typeOfPlayer } from \"../../redux/actions/types\";\nexport const drawCardsAction = (deckCard, playList, dispatch) => {\n  return axios({\n    method: \"GET\",\n    url: `http://deckofcardsapi.com/api/deck/${deckCard.deck_id}/draw/?count=12`\n  }).then(res => {\n    const players = [...playList]; //chia bài\n\n    for (const i in res.data.cards) {\n      const playerIndex = i % 4;\n      players[playerIndex].cards.push(res.data.cards[i]); //i = 0, playerIndex = 0 => card[0] => player[0]\n      //i = 1, playerIndex = 1 => card[1] => player[1]\n      //i = 2, playerIndex = 2 => card[2] => player[2]\n      //i = 3, playerIndex = 3 => card[3] => player[3]\n      //i = 4, playerIndex = 0 => card[4] => player[0]\n      //i = 5, playerIndex = 1 => card[5] => player[1]\n      //i = 6, playerIndex = 2 => card[6] => player[2]\n    }\n\n    dispatch({\n      type: typeOfPlayer.SET_PLAYERS,\n      payload: players\n    });\n    dispatch({\n      type: typeOfCard.DRAW_CARDS\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const shuffleCardsAction = dispatch => {\n  axios({\n    method: \"GET\",\n    url: \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\n  }).then(res => {\n    dispatch({\n      type: typeOfCard.SHUFFLE_CARDS,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getDeckCard = dispatch => {\n  axios({\n    method: \"GET\",\n    url: \"http://deckofcardsapi.com/api/deck/new/\"\n  }).then(res => {\n    dispatch({\n      type: typeOfCard.SET_DECK_CARD,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["D:/KA/HOC HANH/HỌC LẬP TRÌNH 2021/FRONTEND64_20.03-27.09.2021/Buoi33_17.07.2021_React-function/Tro-choi-bai/src/redux/actions/cards.js"],"names":["axios","typeOfCard","typeOfPlayer","drawCardsAction","deckCard","playList","dispatch","method","url","deck_id","then","res","players","i","data","cards","playerIndex","push","type","SET_PLAYERS","payload","DRAW_CARDS","catch","err","console","log","shuffleCardsAction","SHUFFLE_CARDS","getDeckCard","SET_DECK_CARD"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,2BAAzC;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,QAArB,KAAkC;AAC/D,SAAON,KAAK,CAAC;AACXO,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAG,sCAAqCJ,QAAQ,CAACK,OAAQ;AAFjD,GAAD,CAAL,CAIJC,IAJI,CAIEC,GAAD,IAAS;AACb,UAAMC,OAAO,GAAG,CAAC,GAAGP,QAAJ,CAAhB,CADa,CAEb;;AACA,SAAK,MAAMQ,CAAX,IAAgBF,GAAG,CAACG,IAAJ,CAASC,KAAzB,EAAgC;AAC9B,YAAMC,WAAW,GAAGH,CAAC,GAAG,CAAxB;AACAD,MAAAA,OAAO,CAACI,WAAD,CAAP,CAAqBD,KAArB,CAA2BE,IAA3B,CAAgCN,GAAG,CAACG,IAAJ,CAASC,KAAT,CAAeF,CAAf,CAAhC,EAF8B,CAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACDP,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAEhB,YAAY,CAACiB,WAArB;AAAkCC,MAAAA,OAAO,EAAER;AAA3C,KAAD,CAAR;AACAN,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAEjB,UAAU,CAACoB;AAAnB,KAAD,CAAR;AACD,GArBI,EAsBJC,KAtBI,CAsBGC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAxBI,CAAP;AAyBD,CA1BM;AA4BP,OAAO,MAAMG,kBAAkB,GAAIpB,QAAD,IAAc;AAC9CN,EAAAA,KAAK,CAAC;AACJO,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,EAAE;AAFD,GAAD,CAAL,CAIGE,IAJH,CAISC,GAAD,IAAS;AACbL,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAEjB,UAAU,CAAC0B,aAAnB;AAAkCP,MAAAA,OAAO,EAAET,GAAG,CAACG;AAA/C,KAAD,CAAR;AACD,GANH,EAOGQ,KAPH,CAOUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GATH;AAUD,CAXM;AAaP,OAAO,MAAMK,WAAW,GAAItB,QAAD,IAAc;AACvCN,EAAAA,KAAK,CAAC;AACJO,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,EAAE;AAFD,GAAD,CAAL,CAIGE,IAJH,CAISC,GAAD,IAAS;AACbL,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAEjB,UAAU,CAAC4B,aAAnB;AAAkCT,MAAAA,OAAO,EAAET,GAAG,CAACG;AAA/C,KAAD,CAAR;AACD,GANH,EAOGQ,KAPH,CAOUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GATH;AAUD,CAXM","sourcesContent":["import axios from \"axios\";\r\nimport { typeOfCard, typeOfPlayer } from \"../../redux/actions/types\";\r\n\r\nexport const drawCardsAction = (deckCard, playList, dispatch) => {\r\n  return axios({\r\n    method: \"GET\",\r\n    url: `http://deckofcardsapi.com/api/deck/${deckCard.deck_id}/draw/?count=12`\r\n  })\r\n    .then((res) => {\r\n      const players = [...playList];\r\n      //chia bài\r\n      for (const i in res.data.cards) {\r\n        const playerIndex = i % 4;\r\n        players[playerIndex].cards.push(res.data.cards[i]);\r\n\r\n        //i = 0, playerIndex = 0 => card[0] => player[0]\r\n        //i = 1, playerIndex = 1 => card[1] => player[1]\r\n        //i = 2, playerIndex = 2 => card[2] => player[2]\r\n        //i = 3, playerIndex = 3 => card[3] => player[3]\r\n        //i = 4, playerIndex = 0 => card[4] => player[0]\r\n        //i = 5, playerIndex = 1 => card[5] => player[1]\r\n        //i = 6, playerIndex = 2 => card[6] => player[2]\r\n      }\r\n      dispatch({ type: typeOfPlayer.SET_PLAYERS, payload: players });\r\n      dispatch({ type: typeOfCard.DRAW_CARDS });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const shuffleCardsAction = (dispatch) => {\r\n  axios({\r\n    method: \"GET\",\r\n    url: \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\r\n  })\r\n    .then((res) => {\r\n      dispatch({ type: typeOfCard.SHUFFLE_CARDS, payload: res.data });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getDeckCard = (dispatch) => {\r\n  axios({\r\n    method: \"GET\",\r\n    url: \"http://deckofcardsapi.com/api/deck/new/\"\r\n  })\r\n    .then((res) => {\r\n      dispatch({ type: typeOfCard.SET_DECK_CARD, payload: res.data });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}